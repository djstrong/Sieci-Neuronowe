% true oznaczałoby losowanie wag dla neuronów, weights jest wtedy ignorowane
random_weights = true;

% dane wejściowe
input_data = [
 0 0 0;
 0 0 1;
 0 1 0;
 0 1 1;
 1 0 0;
 1 0 1;
 1 1 0;
 1 1 1;
];

expected = [
 0;
 1;
 1;
 0;
 1;
 0;
 0;
 1;
];

%global epochs = [1 8000 16000 24000]

global layers = {};
learn_steps = 10000;
% pierwsza warstwa
% liczba neuronów w warstwie
layers{1}.type='kohonen';
layers{1}.neurons = 8;
layers{1}.row_count = 1;
% funkcja aktywacji
layers{1}.activation_function =@(X) sigmoid(X);
% wartość bias
layers{1}.bias = 0;
% przedział, z którego są losowane wagi
layers{1}.rand_min = -1.0;
layers{1}.rand_max = 1.0;
layers{1}.neighbourhood_width = [0 0 0 0 0];%[7.0 5.0 3.0 1.0];
layers{1}.conscience_coefficient = [1.0 0.5 0.25 0.125 0.1]; %[0 0 0 0];%
layers{1}.learning_coefficient = [0.06 0.03 0.015 0.0075 0];
layers{1}.learn = false;
layers{1}.random_weights = false;

layers{1}.weights = [
  -7.1373e-01   5.8197e-01   3.7303e-01   3.2473e-01;
   1.7615e-01   3.6427e-01   4.8359e-01   3.6448e-01;
   1.3432e-01   9.9980e-01   2.5934e-04   2.8078e-04;
   9.0023e-01   1.1229e-03   7.0647e-01   7.0591e-01;
   7.7555e-01   2.4481e-04   9.9960e-01   7.0646e-04;
   2.8200e-01   5.7556e-01   5.7780e-01   5.7758e-01;
   2.9342e-02   7.0697e-01   1.0356e-03   7.0663e-01;
   4.4511e-01   7.0667e-01   7.0714e-01   3.4924e-04;
  ]
layers{1}.epochs = [1 1000 2000 2500 3000];


layers{2}.type='grossberg';
layers{2}.neurons=1;
layers{2}.bias = 0;
layers{2}.rand_min = -1.0;
layers{2}.rand_max = 1.0;
layers{2}.activation_function = @(X) linear(X,1,0);
layers{2}.epochs = [3000 10000 15000 20000];
layers{2}.coeffs = [0.8 0.5 0.3 0.1];
layers{2}.epoch=0;
layers{2}.random_weights = false;
layers{2}.rule = 'delta'; %'widrow';
layers{2}.learn = false;
layers{2}.weights = [
7.4422e-01    2.1672e-01   -1.5519e-01    1.0000e+00  -1.4822e-323    1.0000e+00    1.0000e+00  -1.4822e-323   1.4822e-323
];







