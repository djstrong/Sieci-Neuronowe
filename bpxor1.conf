% true oznaczałoby losowanie wag dla neuronów, weights jest wtedy ignorowane
random_weights = true;

% dane wejściowe
input_data = [

 0 0;
 0 1;
 1 0;
 1 1;


];

expected = [

 0;
 1;
 1;
 0;

];

%global epochs = [1 8000 16000 24000]
global learn = true
global stages = [1 5000]
global etas = [0.9 0.9]
global momentums = [0.9 0.9]
global layers = {};
learn_steps = 1000;
% pierwsza warstwa
% liczba neuronów w warstwie
layers{1}.type='bp';
layers{1}.neurons = 2;
%layers{1}.row_count = 1;
% funkcja aktywacji
layers{1}.activation_function =@(X) sigmoid(X);
% wartość bias
layers{1}.bias = 1.0;
% przedział, z którego są losowane wagi
layers{1}.rand_min = -1.0;
layers{1}.rand_max = 1.0;
layers{1}.neighbourhood_width = [0 0 0 0 0];%[7.0 5.0 3.0 1.0];
layers{1}.conscience_coefficient = [1.0 0.5 0.25 0.125 0]; %[0 0 0 0];%
layers{1}.learning_coefficient = [0.06 0.03 0.015 0.0075 0];
layers{1}.learn = true;
layers{1}.random_weights = false;

layers{1}.weights = [   0.084876   0.559923  -0.471932;
  -0.147429   0.116434  -0.095994
  ]
layers{1}.epochs = [1 1000 2000 2500 3000];
layers{1}.delta = 0.0;


layers{2}.type='bp';
layers{2}.neurons = 1;
%layers{1}.row_count = 1;
% funkcja aktywacji
layers{2}.activation_function =@(X) sigmoid(X);
% wartość bias
layers{2}.bias = 1.0;
% przedział, z którego są losowane wagi
layers{2}.rand_min = -1.0;
layers{2}.rand_max = 1.0;
layers{2}.neighbourhood_width = [0 0 0 0 0];%[7.0 5.0 3.0 1.0];
layers{2}.conscience_coefficient = [1.0 0.5 0.25 0.125 0]; %[0 0 0 0];%
layers{2}.learning_coefficient = [0.06 0.03 0.015 0.0075 0];
layers{2}.learn = true;
layers{2}.random_weights = false;

layers{2}.weights = [
0.46987  -0.67890   0.38352
  ]
layers{2}.epochs = [1 1000 2000 2500 3000];
layers{2}.delta = 0.0;

